Н‘‘Синтаксис, который невозможно забыть (ссылка на статью)’[https://habr.com/ru/articles/696654/]’

Комментарии:
---
2023-08-01 ~‘*‘alextretyak’’

> Вероятность того, что кто-то станет внедрять новый язык минимальна.
Будем программировать на C++ и Python [или каком-то другом популярном сейчас языке] до скончания веков, что-ли?[[[ {Да, судя по всему, именно так и будет. (Т.к. «скончание веков» уже совсем близко. Да, грустно. Да, очень много планов и задач остаётся нереализованными. Но вы разве не замечаете, что задачи генерируются быстрее, чем решаются?) {Зачем тогда я занимаюсь этим проектом? Просто, чтобы скоротать время. :)(:}}]]] Попробуйте представить, что будет использоваться в IT-сфере через 50-100 лет, если вы не верите в возможность изменений в ближайшие годы/десятилетия.

[[[Я могу понять опытных программистов. Они хорошо изучили какой-то инструмент (язык, библиотеки, IDE) и очень не хотят переучиваться. А потому новые инструменты они всегда будут воспринимать со скепсисом. Но как же быть новым поколениям программистов? Они что теперь из-за этого должны использовать старые инструменты? [[[Я так не считаю. Поэтому я считаю, что важнее будет чтобы язык был понятен не существующим программистам, а новому поколению программистов, тем, кто только начинает изучать программирование.]]]Хотя, разумеется, новое далеко не всегда лучше старого, и чем конкретно предлагаемый язык лучше существующих[[[
>[https://verdagon.dev/blog/when-to-use-memory-safe-part-2#note17 <- https://habr.com/ru/companies/ispsystem/articles/724882/ <- https://habr.com/ru/companies/ispsystem/articles/747392/ <- https://habr.com/ru/top/]:‘good concurrency support like Pony.’
]]] — это очень большой вопрос и [[[здесь/]]]в этом сообщении я отвечать на него не буду. Ещё я встретил такое мнение, адресованное мне: «язык должен быть в общих чертах понятен даже программистам, которые его не изучали; ваш же язык не обладает таким свойством (например, я бы не догадался, что значит конструкция "loop 3")». Но я считаю, что важнее будет, чтобы язык был понятен не существующим программистам, а новому поколению программистов, тем, кто только начинает изучать программирование. И когда говорят о циклах, то мне непонятно, почему основной оператор для обозначения циклов называется for (для), а не loop (цикл). И что удобнее/понятнее спрашивать нужно не у современных программистов (которые просто привыкли к for), а у тех, кто только начинает изучать программирование. [Насчёт конструкции `loop 3` — аналогичная запись используется в AutoHotkey[https://www.autohotkey.com/docs/commands/Loop.htm]. Также ключевое слово `loop` есть в языке Rust для обозначения бесконечного цикла. [[[Также]]]И ещё `loop` используется[https://rosettacode.org/wiki/Loops/For] для циклов в некоторых малоизвестных языках программирования: Arturo, Ela, Lasso, NetRexx.]

Кроме того, д]]]Данный проект не направлен [[[не ]]]на быстрый захват аудитории, поэтому не стоит удивляться его низкой популярности [[‘’][[[на данный момент времени]]/][[[во время]]/]на момент[[[ времени]]] [[[отправки/]]]публикации этого сообщения]. Сначала я [[[планирую/]]]намерен тщательнейшим образом проработать основы языка ([[[основные/]]][[[базовые ]]]встроенные типы, функции, модули[[[, операторы]]]) [[[на основе моего личного опыта и моей практики программирования [вот например ‘[[[моя ]]]статья’[https://habr.com/ru/articles/751612/] на эту тему]]]]и наиболее интересные решения оформить в виде статей (‘вот одна из них’[https://habr.com/ru/articles/751612/]). [[[Параллельно с этим]]][[[Кроме того]/]][[[Помимо этого]/]]Кроме того, я непрерывно провожу анализ существующих языков программирования, их возможностей, особенностей и их эволюции/развития, при этом порой удаётся найти очень интересные [[[фишки/]]]возможности даже в достаточно старых языках (как например ‘в PL/1’[https://alextretyak.ru/comm/compiler.su/k-voprosu-o-paradigmah <- http://compiler.su/k-voprosu-o-paradigmah.php#12]) [возможности, которых нет в современных популярных языках[[[ программирования]]]].[[[ Затем [[[потихоньку переписывать все критически важные библиотеки]]]я планирую собрать весь хороший код на планете и потихоньку переписывать его на новом языке, при этом попутно дополняя или модифицируя сам язык.]]]

[[[Разработчики современных языков программирования (хорошо видно на примере Rust, Swift, Zig, daScript) слишком торопятся[-?(голословное утверждение)-]. Как следствие, они ошибаются. Они]]]Современные языки программирования имеют свои сильные стороны, но в то же время практически в каждом из языков есть [[[явные ]]]ошибки[‘[[[{например ‘запрет складывать целочисленные переменные разной разрядности’/‘отсутствие автоматического приведения целых типов с меньшей разрядностью к целым типам с большей разрядностью’ и неявный return в Rust, неопределённое поведение в C++} ]]]хотя создатели этих языков, наверное, считают их «особенностями», а не ошибками :)(:’] проектирования или просто неудачные решения [а те языки, в которых их нет, обладают очень [[[скудным функционалом]]/]ограниченными возможностями]. К тому же, в современные языки добавляют [[[очень-]]]очень много ненужного функционала [т.к. например современный браузер, современный 3D-движок или современную операционную систему вполне возможно написать на C++98 с использованием буквально нескольких возможностей[‘речь об auto/decltype, а также std::unique_ptr и move semantics (и ещё [в меньшей степени] — лямбды[[[, variadic templates]]] и range-based for)’] C++11[[[ и C++17]]], а ядро Linux вообще целиком написано и до сих пор пишется на Си (и Rust даже не упоминается в списке языков на ‘GitHub-странице проекта’[https://github.com/torvalds/linux])]. [[[Про это можно написать [[[немало/]]]много статей [в чём конкретно ошибаются разработчики [[[этих/]]]современных языков (особенно это касается[https://medium.com/@tonyallevato/strings-characters-and-performance-in-swift-a-deep-dive-b7b5bde58d53 ‘Пример того, как не надо делать строки.’] Swift)], но это второстепенная задача. А первостепенная —]]][[[#rec##audio#[REC_0002555.wav]]]]И своей задачей я ставлю продумать и разработать такой язык программирования, который будет практически лишён ошибок проектирования и который будет содержать достаточно функционала [и по возможности минимальное его количество] для того, чтобы [[[останется]/]]оставаться актуальным и практичным в очень долгосрочной перспективе.[[[ И пока что среди современных языков я не вижу .]]][[[[
Вот такой вот мой план «захвата мира», если вкратце. :)(:]]]][[[

Вообще, разработка языка программирования — это такая деятельность, в которой никакие отдельные даже самые гениальные идеи [[[на итоговый результат практически не влияют]]]не оказывают решающее влияние на успешность проекта в долгосрочной перспективе, а решает ~‘выбор идей’ из огромного множества [как своих, так и чужих], которые бы максимально дополняли друг друга и составляли целостную картину. И чтобы такой выбор был максимально осознанным, проект должен расти медленно. Цитата отсюда[https://ventrellathing.wordpress.com/2013/06/18/the-case-for-slow-programming/]:
> We are transitioning from an industrial age and an economic era defined by growth to an age of sustainability. Yes, new software and new businesses need to grow. But to be sustainable, they need to grow slowly and with loving care. Like good wine. Like a baby.]]]
