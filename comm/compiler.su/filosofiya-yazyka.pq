Н‘‘Философия языка (ссылка на статью)’[http://compiler.su/filosofiya-yazyka.php]’

Комментарии:
---
2017-10-12 ~‘*‘alextretyak’’

> В чём выгода аппаратного прерывания при переполнениях?
Вы [[[совершенно/абсолютно верно]]]правильно ответили на собственный вопрос: ‘‘Не нужен дополнительный код для проверки флага переполнения. Проверки и код раздувают, и процессорное время тратят.’’

> P.S. А вы бы могли предложить какую-то альтернативу «try...catch» для реагирования на переполнения?
Я вижу [[[единственное разумное]/]]такое решение:
. Переполнения при арифметических операциях должны [[[бросать]/]вызывать/]порождать[[[\raise[‘в Python’]]]] ‘исключения второго рода’[‘фатальные/"дорогие" исключения’], перехватывать которые (посредством catch) — необязательно[[[ {а [[[во многих программах]]]в большинстве программ вообще излишне}]]]. {Если исключение не было перехвачено (посредством catch), тогда целесообразно сохранить полный дамп памяти процесса {в Windows: через вызов #‘MiniDumpWriteDump(..., MiniDumpWithFullMemory|..., ...)’[[[[-Юрию:почему символ `|` заменился на `!`? впрочем, ладно, мне так тоже (:нравится:), так что можно это оставить с `!`-]]]] [{нам[‘программистам в Katauri’] при работе над ММОРПГ Royal Quest эти дампы очень помогали в исправлении ошибок в коде сервера}]} и выдать пользователю сообщение об ошибке с предложением прервать выполнение программы либо продолжить выполнение "на свой страх и риск".}
Свою позицию по исключениям {про два рода исключений} я изложил здесь[http://web.archive.org/web/20191218102909/https://bitbucket.org/pqmarkup/pqmarkup/commits/0b7f9590718e928063a5b0d07ff35195c387ecb3 <- https://sourceforge.net/p/pqmarkup/code/ci/0b7f9590718e928063a5b0d07ff35195c387ecb3/ <- https://bitbucket.org/pqmarkup/pqmarkup/commits/0b7f9590718e928063a5b0d07ff35195c387ecb3].
