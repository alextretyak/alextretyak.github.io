Н‘‘Продолжение цикла и выход из него (ссылка на статью)’[http://compiler.su/prodolzhenie-tsikla-i-vykhod-iz-nego.php]’

Комментарии:
---
2024-10-23 ~‘*‘bvz’’

Такое чувство, что проблема искусственно создана на ровном месте. Специально, чтобы потом триумфально разрешить её с помощью оператора goto. Кроме циклов for, между прочим, существуют также ещё и циклы while и until. Что мешает использовать один из них? Пусть условие надо_выйти_из_цикла с отрицанием добавлено через конъюнкцию в самый внешний цикл while. И тогда на каждом шаге этого самого внешнего цикла будет проверяться истинность условия надо_выйти_из_цикла.

Собственно говоря, циклы for, по-моему, придумали с одной единственной целью: избавиться от записи i=i+1 внутри цикла и включить её в заголовок. В некоторых случаях это, может, и удобно. Но если в данном конкретном случае цикл for не подходит, зачем нужно насильно его использовать?
---
2024-10-23 ~‘*‘Автор сайта’’

Не знаю, искусственным ли путём образовалась проблема или естественным. Однако до сих пор для выхода из нескольких циклов используют либо «goto»
#‘
цикл <проверка условия>
    цикл <проверка условия>
        если <дополнительная проверка условия>
            goto <метка>
    // конец второго цикла
// конец первого цикла
<метка>:
’
либо заменитель «goto» («break» с меткой)
#‘
цикл <проверка условия>
    цикл <проверка условия>
        если <дополнительная проверка условия>
            break <метка>
    // конец второго цикла
// конец первого цикла
<метка>:
’
либо пользуются самым длинным вариантом — создают дополнительные переменные с дополнительными танцами с бубнами:
#‘
надо_выйти_из_цикла = ложь
цикл <проверка условия>
    цикл <проверка условия>
        если <дополнительная проверка условия>
            надо_выйти_из_цикла = истина
            break
    // конец второго цикла
    если надо_выйти_из_цикла
        break
// конец первого цикла
<метка>:
’
Независимо от вида цикла: «while», «until», «for».

> чтобы потом триумфально разрешить её с помощью оператора goto.
Вы невнимательно читали. Как раз-то этот вариант
#‘
цикл <проверка условия>
    цикл <проверка условия>
        если <дополнительная проверка условия>
            break N  // N -число циклов, которые надо покинуть
’
и самый лаконичный, и самый прозрачный. Для него не нужны ни метки (как для «goto» и «break» с меткой), ни дополнительные переменные.
---
2024-10-24 ~‘*‘bvz’’

Автор сайта, ладно, я понял вашу мысль. Лаконичный — это значит, краткий, правильно? Но ведь не всегда краткий = изящный. Изящность, как и красота — вещь довольно субъективная. На мой взгляд, изящно было бы писать программу, придерживаясь один раз принятых принципов. Например, не использовать оператор goto. И никогда не отступая от них. Но вы и не использовали, вы использовали break N.

Короче, я бы всё равно писал по-своему. Я только не понял, предлагал ли кто-нибудь выше мой вариант. А что касается искусственности созданной проблемы — проблема эта возникает в тот момент, когда "бывают такие ситуации, когда условие выхода удобнее проверить не в заголовке цикла, а «по месту требования»." Так вот, я бы просто поместил это условие именно в заголовок каждого цикла. Руки бы у меня от этого не отвалились. Удобство или неудобство может возникнуть на стадии понимания программы. Но опять-таки, не думаю, что такую программу будет намного труднее понять.

И более того. Если вы всегда записываете условие выхода в заголовок цикла, все такие программы будут выглядеть одинаково. Вне зависимости от количества вложенных циклов. Соответственно, исчезает возможность ошибиться на стадии break N. Например, написать break 6 вместо break 5. А может, и вовсе стоит написать рекурсивную процедуру для неограниченного числа вложенных "циклов".

Хотя, строго говоря, такие алгоритмы, наверное, не будут эквивалентными. Если я проверяю некое условие в заголовке каждого цикла, я делаю дополнительное действие, правильно? Значит, программа будет медленнее работать. Но я такими вещами никогда не заморачивался, честно говоря.
---
2024-10-26 ~‘*‘alextretyak’’

> Так вот, я бы просто поместил это условие именно в заголовок каждого цикла.
Не во всех языках программирования в заголовок цикла *‘for’ можно вставить дополнительное условие.
Например, в том же Python нет универсального цикла *‘for’. И для выхода из нескольких циклов приходится, как уже было сказано выше «создавать дополнительные переменные с дополнительными танцами с бубнами».

Вот конкретный пример.
У меня есть Python-скрипт, которому требуется определить директорию с установленной Microsoft Visual Studio, [[[причём самой]]][[[как можно более новой версии]]]причём более новые версии должны быть в приоритете.
Для этого я использовал такой вложенный цикл:
#(Python)‘
for version in ['2022', '2019', '2017', '2015', '2013']:
    for edition in ['BuildTools', 'Community', 'Enterprise', 'Professional']:
        if os.path.isfile('C:\\Program Files (x86)\\Microsoft Visual Studio\\' + version
                          + '\\' + edition + R'\VC\Auxiliary\Build\vcvarsall.bat'):
            ... # здесь нужно выйти из всех циклов
’

Но недавно этот скрипт пришлось поправить, так как оказалось, что 2022-ая студия может быть установлена не в "C:\Program Files (x86)", а в "C:\Program Files".
Вот ссылка на мой коммит с этой правкой: [https://github.com/symasm/symasm/commit/7d2f432a9ef45784646a01662be874abb8ba17e7].
В итоге код получился вот таким:
#(Python)‘
was_break = False
for version in ['2022', '2019', '2017', '2015', '2013']:
    for edition in ['BuildTools', 'Community', 'Enterprise', 'Professional']:
        for x86 in [0, 1]:
            vcvarsall = 'C:\\Program Files' + ' (x86)'*x86 + '\\Microsoft Visual Studio\\' + version + '\\' + edition + R'\VC\Auxiliary\Build\vcvarsall.bat'
            if os.path.isfile(vcvarsall):
                was_break = True
                #print('Using ' + version + '\\' + edition)
                break
        if was_break:
            break
    if was_break:
        break
if was_break:
    masm_pathname = subprocess.check_output('"' + vcvarsall + '" x64 > nul && where ml64', encoding = 'ascii').rstrip()
    open('masm_pathname.txt', 'w').write(masm_pathname)
else:
    print('''Unable to find vcvarsall.bat!
If you do not have Visual Studio 2013, 2015, 2017, 2019 or 2022 installed please install it or Build Tools for Visual Studio from here[https://visualstudio.microsoft.com/downloads/].''')
    masm_pathname = '-'
’

Видите замечательную лесенку из #(Python)‘if was_break’?
И теперь представьте, что вам запросто может потребоваться добавить ещё один вложенный цикл *‘for’.

А если использовать язык программирования с возможностью выхода из нескольких циклов, например 11l, то код получится значительно проще:
#(11l)‘
loop(version) [‘2022’, ‘2019’, ‘2017’, ‘2015’, ‘2013’]
   loop(edition) [‘BuildTools’, ‘Community’, ‘Enterprise’, ‘Professional’]
      loop(x86) [0, 1]
         var vcvarsall = ‘C:\Program Files’(‘ (x86)’*x86)‘\Microsoft Visual Studio\’version‘\’edition‘\VC\Auxiliary\Build\vcvarsall.bat’
         if fs:is_file(vcvarsall)
            //print(‘Using ’version‘\’edition)
            masm_pathname = os:(‘"’vcvarsall‘" x64 > nul && where ml64’).stdout.rtrim("\n")
            File(‘masm_pathname.txt’, WRITE).write(masm_pathname)
            loop(version).break

loop.was_no_break
   print(‘Unable to find vcvarsall.bat!
If you do not have Visual Studio 2013, 2015, 2017, 2019 or 2022 installed please install it or Build Tools for Visual Studio from here[https://visualstudio.microsoft.com/downloads/].’)
   masm_pathname = ‘-’
’

Конструкция *‘loop(version).break’ осуществляет выход из соответствующего цикла (в языке 11l меток нет).
Вместо неё можно использовать эквивалентную (при данном количестве вложенных циклов!) конструкцию: *‘^^loop.break’.
Я выбрал символы крышечки (^) вместо числа после *‘break’, так как:
1.‘не очевидно с какого числа начинается отсчёт, с 0 или с 1 (в PHP начинается с 1, т.е. просто *‘break’ равнозначен *‘break 1’, а чтобы прервать внешний цикл, нужно использовать *‘break 2’, но в программировании нумерацию принято начинать с 0, т.е. было бы логично, что просто *‘break’ равнозначен *‘break 0’... в общем, возможна путаница; с крышечками же логика проще — если их нет, то *‘loop.break’ он и в Африке... осуществляет выход только из текущего цикла, если одна крышечка, то выходим из вышестоящего цикла по отношению к текущему, если крышечки две, то идём ещё выше (сам этот символ символизирует направление вверх, потому он и был выбран {
Но ведь *‘^loop.break’ по факту осуществляет переход не выше/вверх, а вниз, сразу к коду после цикла. Как же так?
Дело тут в том, что крышечка (^) относится не к *‘loop.break’, а к *‘loop’. Т.е. имеется в виду *‘(^loop).break’, а не *‘^(loop.break)’.
И использовать крышечку/-ки перед *‘loop’ можно не только для выхода из цикла, но и для продолжения цикла — *‘^loop.continue’, для получения индекса (номера[[[,]]] начиная с 0) текущей итерации цикла — *‘^loop.index’ и т.д.
}) и т.д.);’
2.‘число после *‘break’ создаёт ощущение, что вместо него можно подставить какое-то целочисленное выражение и написать например *‘break 2+3’ или вообще вставить какую-[[[то/]]]нибудь переменную:
#(11l)‘
loop ...
    loop ...
       loop ...
          int entered_number = int(input(‘Сколько циклов вы хотите покинуть?’))
          break entered_number
’’

Более «монолитно», чем *‘break 2’, выглядит запись *‘break_2’, но так сделать в языке программирования не получится[[[ —]]], т.к. break_2 может быть действительным именем переменной/идентификатором.

Но если вернуться к исходной проблеме — лесенке из #(Python)‘if was_break’, то есть и друго[[[й выход]]]е решение — поместить необходимую логику внутрь функции, которая вместо *‘break’ будет делать *‘return’.
Но мне не нравится такое решение — нужно придумывать имя для новой функции, которая используется только в одном месте и только для обхода ограничения используемого языка программирования. Похоже на костыль.

> Хотя для применения «continue N» не очень легко привести пример из жизни для иллюстрации его полезности. Возможно, читатели этих строк предложат что-то в комментариях к статье.
Предложат-предложат. :)(:

Вот два наиболее интересных встретившихся мне примера, в которых было бы оправдано применение «continue N»:
1. В транспайлере Python → 11l вот ‘эти 4 строки’[https://github.com/11l-lang/python_to_11l/blob/f54b0475ebbceaea280e1b9eca6eab99069f2f4f/parse.py#L3053-L3056] не самого понятного Python-кода можно заменить одной строкой *‘^loop.continue’ (аналог *‘continue 2’).
2. Этот ‘код на языке D’[https://rosettacode.org/wiki/Peaceful_chess_queen_armies#D] использует *‘continue <метка>’ [и, как видно по этой же веб-странице, эту конструкцию поддерживают также языки Go, Java, Kotlin, Swift], но т.к. Python такого не поддерживает, пришлось усложнить логику путём добавления двух else-веток для for — ‘вот этот перевод на Python’[https://github.com/11l-lang/_11l_to_cpp/blob/master/tests/python_to_cpp/Rosetta%20Code/p.txt#L2272].
Там же на rosettacode.org можно поискать ещё хорошие примеры употребления *‘continue <метка>’ (вдруг я что-то упустил).
---
2024-10-26 ~‘*‘Автор сайта’’

> *‘^^loop.break’
Я префиксному «^» собираюсь назначить иную роль. Один такой символ — увеличение области видимости на уровень выше. То есть за пределы скобки [[[(]]]«)»:
#‘
( (^переменная = ... // инициализация переменной с выводом её типа
    ... = переменная // внутри скобок она видна
  )
  ... = переменная   // за пределами первой пары скобок тоже видна
)
... = переменная   // за пределами второй пары скобок не видна
’

> не очевидно с какого числа начинается отсчёт, с 0 или с 1
Число после «break» — это *‘сколько циклов надо покинуть’. Если 0, то значит цикл покидать не надо.

> число после break создаёт ощущение, что вместо него можно подставить какое-то целочисленное выражение и написать например break 2+3
Компилятор разочарует своими сообщениями об ошибках. Так же, как если бы вместо var4 написали бы var2*2.

> эти 4 строки не самого понятного Python-кода можно заменить одной строкой *‘^loop.continue’
👍
---
2024-10-26 ~‘*‘ИванАс’’

>‘#(Python)‘
for version in ['2022', '2019', '2017', '2015', '2013']:
    for edition in ['BuildTools', 'Community', 'Enterprise', 'Professional']:
        for x86 in [0, 1]
’’
Наверное, можно заменить на product из itertools.
---
2024-10-28 ~‘*‘alextretyak’’

> Я префиксному «^» собираюсь назначить иную роль. Один такой символ — увеличение области видимости на уровень выше.
Так одно другому не мешает.
В 11l, кстати, планируется аналогичный функционал: использовать префиксы *‘^’ для доступа к переменным из внешней области видимости. Особенно это может быть полезно во время отладки (например, есть цикл по *‘i’, внутри него ещё какой-то цикл, внутри которого ещё маленький цикл по *‘i’, находясь в котором хочется получить текущее значение переменной *‘i’ верхнего уровня, это можно сделать посредством записи *‘^i’).[[[
#rec##audio#[REC_0003412.wav][в СвН соборе в углу на лавочке у иконы Арх. Михаилу]
Я об этом писал ещё в статье «Каркас нового языка программирования».
]]] Я об этом писал ещё в статье «Каркас нового языка программирования» на Хабре и в комментариях там по[[[ этому]]] поводу этой возможности велись [[[активные/]]]горячие споры: [https://habr.com/ru/articles/350694/comments/#comment_10701298].
Также хочу обратить внимание на то, что в записи *‘^^loop.break’ крышечки относятся не к *‘break’, а к *‘loop’. Т.е. имеется в виду *‘(‍^^loop).break’, а не *‘^^(loop.break)’.

>‘#‘
( (^переменная = ... // инициализация переменной с выводом её типа
    ... = переменная // внутри скобок она видна
  )
  ... = переменная   // за пределами первой пары скобок тоже видна
)
’’
Ну в чистом виде такой код малополезен — проще создать переменную чуть раньше за скобкой. А на практике может понадобиться создать «внешнюю» переменную в теле условного оператора. Вот только вопрос[[[,]]]: что делать в случае, когда условие не выполняется — [[[ведь обращение к этой переменной осуществляется]]]как должно отрабатывать обращение к этой переменной в последующем коде?

И разве ваш язык не предполагает явное обозначение объявления новой переменной?
В 11l обязательно указывать при инициализации, что объявляется новая переменная, с помощью ключевого слова *‘var’\*‘пер’:
#(11l)‘
если <условие>
   пер имя_новой_переменной1 = ...  // видна только внутри тела условного оператора
   пер ^имя_новой_переменной2 = ... // видна также снаружи,
вывод(имя_новой_переменной2)        // но что делать, если <условие> ложно?
’

Также префикс *‘^’ можно будет использовать для обозначения «внешних» счётчиков цикла:
#(11l)‘
цикл(^н) 0 .< 100 // цикл от 0 до 100, включая 0, но не включая 100
   если <условие>
      цикл.прервать // или цикл.выход

вывод(н) // выводим значение `н` на итерации, в которой цикл был прерван
         // если цикл не был прерван, то в `н` будет число 100
’
И перед точкой:
#‘
.offset = 5
pos1.
   pos2.
      .x = 10 + ^.x + ^^.offset
     └─┬┘      └─┬─┘ └────┬────┘
       │         │        ╘═(^^.).offset = 5
       ╘═pos2.x  ╘═pos1.x
’
И ещё — для внешних return:
#(11l)‘
фн внешняя_функция(...)
   фн локальная_функция()
      ^возврат // возврат из внешней функции
   локальная_функция()
   ... // этот код выполняться не будет, т.к. внутри вызова
   ... // локальной функции осуществляется возврат из внешней
’[[[
На замечание «это приводит к неочевидной логике работы кода функции» я могу ответить, что внешний/глубокий return ничем не хуже исключений, которые возбуждаются при обращении к элементу по индексу за границами массива или при арифметических переполнениях.
]]]

> Число после «break» — это сколько циклов надо покинуть. Если 0, то значит цикл покидать не надо.
А вот разработчики языка PHP с вами не согласны.
В версии до 5.4 *‘break 0’ работал так же как *‘break 1’, а в 5.4 и более новых версиях — писать *‘break 0’ вообще запретили.
[https://php.ru/manual/control-structures.break.html][[[ <- google:‘php "break 0"’]]]

> Компилятор разочарует своими сообщениями об *‘ошибках’. Так же, как если бы вместо var4 написали бы var2*2.
Эмм. Не понял, а в чём ошибка компиляции в записи var2*2? Это же простое умножение значения переменной var2 на число 2.[[[
Если речь про ошибку «переменная не найдена», то если есть переменная var4, то скорее всего есть и var2. :)(:]]]
---
2024-11-04 ~‘*‘Автор сайта’’

*‘alextretyak’, наконец-то отвечаю Вам.
> В 11l, кстати
Кстати, что означает такое название языка? Почему оно такое?

> в записи ^^loop.break крышечки относятся не к break, а к loop. Т.е. имеется в виду (^^loop).break, а не ^^(loop.break).
Не очень понимаю, зачем оператору break нужен loop. И так же ясно, что выйти можно только из цикла. В одних местах Вы стремитесь к наибольшей краткости, а в этом месте — нет. Даже case с двоеточием убираете из конструкции switch, оставляете одну константу. А тут такая расточительность.

> такой код малополезен — проще создать переменную чуть раньше за скобкой.
Если чуть раньше, то значит
. просто её объявить, без инициализации. Тогда придётся делать анализ: а не используется ли эта переменная в правой части присваивания, будучи неинициализированной?
. Или инициализировать, но инициализация за скобкой будет бесполезной: значение в последующем будет изменено, а инициализирующее значение так и не понадобится.
Инициализация же в нужном месте с распространением видимости на уровень выше упрощает применение вывода типа через инициализацию.

> А на практике может понадобиться создать «внешнюю» переменную в теле условного оператора. Вот только вопрос: что делать в случае, когда условие не выполняется — как должно отрабатывать обращение к этой переменной в последующем коде?
Инициализация переменной должна произойти во всех альтернативных ветвях кода во избежание использования неинициализированной переменной в правой части присваивания.

Но лучше это делать конструкцией вроде этой:
#‘
а = (если условие; "это правда" иначе "не верь этому")
’

> не предполагает явное обозначение объявления новой переменной?
Да, не предполагает. Хотя, если требуется, можно уточнить тип инициализирующего значения.

> В 11l обязательно указывать при инициализации, что объявляется новая переменная, с помощью ключевого слова
У Алексея Недори в его Тривиле сделано весьма любопытно
#‘
а = 9  // а — константа, ибо знак равенства
б := 0 // б — переменная, ибо присваивание
’

Да и зачем вообще объявлять новую переменную? Вы же стремитесь к краткости в языке. Ясное дело, что описание типов необходимо для аргументов функции или полей структур данных, без этого не обойтись. С глобальными переменными тоже надо думать, как быть.

> в 5.4 и более новых версиях — писать break 0 вообще запретили.
И правильно сделали. Зачем нужны бессмысленные конструкции? Когда я написал про break 0, то это было «объяснение на пальцах». Я лишь уповал на логику, чтобы исключить путаницу. А не иллюстрировал будущие задумки.

> в чём ошибка компиляции в записи var2*2? Это же простое умножение значения переменной var2 на число 2.
Я имел в виду, что выражение
#‘
var4 = нечто
’
синтаксически правильно, в отличие от
#‘
var2*2 = нечто
’
Точно так же
#‘
break 4
’
не может быть заменено на
#‘
break 2*2
’
Хотя в теории, ничто не мешает ‘во время компиляции вычислить значение’[http://compiler.su/makrosy-eto-chistye-funktsii-ispolnyaemye-vo-vremya-kompilyatsii.php] количества покидаемых циклов, если выражение вычислимо во время компиляции.
#‘
break cos(0) + tg(π/2)
’
Но тогда придётся делать законным
#‘
break 0
’
Но это всё игры разума, можно обойтись без пижонства, одним лишь обычным числом.
---
2024-11-06 ~‘*‘alextretyak’’

*‘ИванАс’
> Наверное, можно заменить на product из itertools.
В данном случае да, можно.
[[[Но читаемость кода, на мой взгяд, при этом ухудшится.]]]Но восприятие кода при этом усложнится[[[ (]]], несмотря на избавление от лесенки из #(Python)‘if was_break’[[[), т.к. itertools.product встречается в реальном коде [[[достаточно/]]]очень редко]]].

*‘Автор сайта’
> Кстати, что означает такое название языка?
Об этом можно догадаться из описания языка на его сайте — [http://11l-lang.org/ru]
[[[Чуть б]]]Более подробно написано об этом на странице языка в Википедии (которую, правда, уже удалили, но есть сохранённая копия — [https://11l-wikipedia.github.io/ru]):
< В отличие от других языков программирования, ключевые слова 11l структурированы в иерархию. На верхнем уровне этой иерархии располагается 11 базовых/корневых ключевых слов. Данная черта легла в основу названия языка программирования 11l, где «l» означает «litterae» в латинском, «logos» в греческом (в значении «слово»), либо «letters» в английском (так как корневые ключевые слова языка можно сокращать до одной буквы).

> Не очень понимаю, зачем оператору break нужен loop.
[[[Таким образом,]]]Поэтому, исходя из названия языка, я не могу добавить в 11l ключевое слово *‘break’, т.к. в [[[таком/]]]этом случае корневых ключевых слов станет больше, чем 11.

> Даже case ... убираете из конструкции switch
С *‘case’ аналогично — добавить это ключевое слово в 11l невозможно [не изменив название языка на 12l :)(:].

> И так же ясно, что выйти можно только из цикла.
Не только. В 11l ещё есть *‘switch.break’. Впрочем, его полезность под вопросом. А вот *‘switch.fallthrough’ может пригодиться.

К тому же, даже если «только из цикла», то остаётся вопрос: «а из какого именно цикла?» И вот тут этот "[[[избыточный/]]]расточительный" синтаксис оказывается очень к месту: *‘loop’ обозначает текущий цикл, *‘^loop’ обозначает вышестоящий цикл, *‘loop(version)’ обозначает цикл с переменной цикла version и т.д. И к любому выбранному циклу можно применить любое ключевое "подслово" [[[цикла]]]корневого слова loop, а именно *‘break’, *‘continue’, *‘index’, *‘first_iteration’ и пр.

> Или инициализировать, но инициализация за скобкой будет бесполезной
А зачем вообще необходимо использовать вложенные скобки в вашем примере?
Можете привести более законченный/практичный пример где требуется запись *‘^переменная = ...’? А то[[[ мне вообще]]] не очень понятно, что вы имели в виду.

> Да и зачем вообще объявлять новую переменную?
Если честно, я даже не рассматривал этот вопрос всерьёз. Практически во всех компилируемых языках переменные необходимо объявлять явно, и я считал этот вопрос решённым и не требующим переосмысления. А сейчас вот даже и не знаю, что ответить, какие [[[реальные/]]]весомые аргументы привести в пользу явного объявления.

Прежде всего, мне нравится чётко видеть в коде, где объявляется/создаётся новая переменная, а где изменяется значение уже существующей.

И компилятор не пропустит случаи, когда в имени переменной была допущена ошибка:
#(11l)‘
fn calc_result()
   var result = 0
   if ...
      rezult = 1 // ошибка компиляции, а не создание новой переменной с именем rezult
   ...
’

[[[Чтобы можно было]]]Также явное объявление позволяет создать новую переменную с уже использующимся именем во внутренней области видимости:
#(11l)‘
fn calc_result()
   var r = 0
   ...
   if ...
      var r = 1 // без `var` будет использоваться внешняя `r`
      print(r)  // выводим значение внутренней `r`
   ...
   return r // возвращаем значение `r`, объявленной в начале функции
’[[[
А также для единообразия области видимости переменных циклов:
#(11l)‘
loop(i)
   ...
   loop(i)
      ...
   ...
’]]]
Или позволяет запретить создание таких переменных (т.н. variable shadowing). [Причём этот запрет лучше вынести из спецификации языка на уровень опций компилятора, чтобы решение принимал руководитель проекта (решение о том, позволять variable shadowing или запрещать в коде проекта).[[[
Идея навеяна сообщением от lair:
>[https://habr.com/ru/articles/350694/comments/#comment_10701298]:‘потому что variable shadowing — это зло.’
]]]]

> Ясное дело, что описание типов необходимо для аргументов функции
Тип аргументов функции даже в компилируемом языке указывать необязательно.

Так, в C++20 появилась возможность использовать auto вместо типа аргумента функции — в этом случае тип аргумента «определится» в месте вызова функции.
А в 11l такое поведение получается в случае, когда тип аргумента вообще не указан (а только его имя[[[ аргумента]]]).

Хотя для перегрузки функции с одинаковым количеством аргументов указать тип хотя бы некоторых из них, конечно, придётся явно.

> Когда я написал про break 0, то это было «объяснение на пальцах». Я лишь уповал на логику, чтобы исключить путаницу.
Тогда соглашусь. Логика в этом есть.
Правда такую запись — *‘break <число>’ — в других языках (кроме PHP) я не встречал.
---
2024-11-09 ~‘*‘Автор сайта’’

> Данная черта легла в основу названия языка программирования 11l, где «l» означает «litterae» в латинском
Мне кажется, маркетологи убили бы Вас за такое название. 🤣

> я не могу добавить в 11l ключевое слово break, т.к. в этом случае корневых ключевых слов станет больше, чем 11... добавить это ключевое слово в 11l невозможно, не изменив название языка на 12l
Вы сами придумали себе трудности, а потом героически их преодолеваете. Была когда-то такая забава — турнир поэтов. Поэты сперва придумывали какие-нибудь произвольные ограничения, например окончание строк на какие-то строго определённые слова. А потом укладывали свои стихи в такое прокрустово ложе. Вот и Вам, видимо, придётся строить модель парусника внутри стеклянной бутылки. Но Вы автор, Вы творец и Вам виднее.

> Можете привести более законченный/практичный пример где требуется запись ^переменная = ...?
#‘
(^i = 0 цикл i < N; ++ i // i объявлена внутри скобок
   . . .)
j = i                    // но видна за скобками
’

> Практически во всех компилируемых языках переменные необходимо объявлять явно, и я считал этот вопрос решённым и не требующим переосмысления. А сейчас вот даже и не знаю, что ответить, какие весомые аргументы привести в пользу явного объявления.
Вывод типов, то есть инициализация как значения, так и типа, исключает такой класс ошибок, как использование неинициализированных переменных. Вывод типов создаёт иллюзию, что объявлять переменные не надо. Но это только иллюзия, которая придаёт сходство с языками с динамической типизацией.

> мне нравится чётко видеть в коде, где объявляется/создаётся новая переменная, а где изменяется значение уже существующей.
Есть возможность почувствовать вкус иного стиля, попрактиковавшись на языках типа PHP или Basic. Тогда идею вывода типов легче принять. В языках с динамической типизацией тип переменной может меняться по ходу вычислений, а при выводе типов тип переменной задаётся один раз, при инициализации.

> явное объявление позволяет создать новую переменную с уже использующимся именем во внутренней области видимости
Мне кажется, уникальность имён позволяет не париться на эту тему. А если приспичило, то можно неуникальные имена сопровождать именем области видимости. Но, думается, лучше не дублировать имена.

> Хотя для перегрузки функции с одинаковым количеством аргументов указать тип хотя бы некоторых из них, конечно, придётся явно.
И тут склоняюсь к ‘уникальности имён’[http://compiler.su/unikalnost-imyon-funktsij.php]. Хотя полиморфизм времени компиляции даёт некоторую волю, не так уж и сильно ограничивает такая уникальность.

> Правда такую запись — break <число> — в других языках (кроме PHP) я не встречал.
Я уже рассказывал историю своих взаимоотношений с break и continue. Когда-то придумал, что эти ключевые слова надо сделать с числовым параметром. Потом познакомился с PHP и увидел, что break в нём может иметь параметр, а вот continue нет. Потом написал и опубликовал эту идею в статье, которую мы сейчас комментируем. Потом появился язык Jancy, в котором и break, и continue имеют параметр. А автор языка Jancy просит меня включить свой язык в ‘этот список’[http://compiler.su/entuziasty-razrabotchiki-kompilyatorov-i-ikh-proekty.php].
---
2024-11-13 ~‘*‘Неслучайный читатель’’

Если не нравится *‘break 2’, можно заменить на *‘break break’
#‘
цикл
    цикл
        если условие
            break break //выход из обоих циклов
’
То есть *‘break N’ меняется на N штук *‘break’. Как в языках народов Полинезии: если существительное употребляется несколько раз, то столько штук и имелось в виду.

С *‘continue N’ интереснее. Ведь чтобы перейти к продолжению цикла уровня N, надо сперва выйти из N-1 циклов. То есть *‘continue N’ по факту означает *‘break ... break continue’: где *‘break’ повторяется N-1 раз.
---
2024-11-13 ~‘*‘Борис К.’’

*‘Ада’
#‘
цикл1:loop
    ...
    цикл2:loop
        ...
        exit цикл1;
        exit цикл2;
        ...
    end loop цикл2;
    ...
end loop цикл1;
’
---
2024-11-13 ~‘*‘Неслучайный читатель’’

Длинновато с метками.
---
2024-11-14 ~‘*‘alextretyak’’

*‘Автор сайта’
> Вы сами придумали себе трудности, а потом героически их преодолеваете.
[[[Честно говоря, не думал, что можно посмотреть на эту фичу 11l с такой точки зрения.]]]А ведь и правда, можно посмотреть на это и с такой точки зрения. Как-то не думал об этом.
Но всё-таки, синтаксис и возможности языка 11l [[[составлялись/]]]определялись не исходя из его названия (к которому я пришёл далеко не сразу), а наоборот — когда я понял/пришёл к окончательному решению, что корневых ключевых слов достаточно одиннадцати[[[ (и даже решил отказаться от [[[вспомогательного]]] слова *‘extra’ для подслов вне категорий)]]], то решил оставить такое название с целью предотвратить [[[его]]] [[[дальнейшее]]]ненужное раздувание языка.

> Есть возможность почувствовать вкус иного стиля, попрактиковавшись на языках типа PHP или Basic.
Я уже давно напрактиковался в таких языках. Даже свой движок форума написал на PHP и JavaScript.
И если PHP со своими вездесущими «долларами» [перед именем каждой переменной] и "аляповатой" и перегруженной стандартной библиотекой мне никогда не нравился, то JavaScript-ом я поначалу прямо таки восхищался. После C++ (причём версии C++03) с его излишней многословностью, JS ощущался как глоток свежего воздуха. Но восхищение со временем и опытом профессионального программирования [правда не на JS, а на Lua и C++] прошло. И пришло понимание, что строгая типизация всё-таки лучше (а строгая статическая — ещё лучше).
[[[А отсутствием необходимости явного объявления/создания переменных я порядочно «наелся» в Python.]]]Но по опыту программирования на Python я, откровенно говоря, могу признать, что отсутствие необходимости явного объявления/создания переменных — штука весьма удобная.
[[[Более того]]]И вместе с тем, наверное самое большое, что меня в [[[нём/]]]Python раздражает, это смежная/похожая его фича — [[[отсутствие вложенных областей]]]единая область видимости для всех локальных переменных в функции, независимо от того, на каком уровне они создаются.
К примеру, [[[попробуйте догадаться]]]догадываетесь, почему в ‘этой строке кода’[https://sourceforge.net/p/pqmarkup/code/ci/0aafa73f124996c2be99483a4479cd79e1a43d02/tree/pqmarkup.py#l624] [[[используется/]]]написано *‘for ii in ...’, а не просто *‘for i in ...’?
Да потому, что *‘i’ уже используется в этой функции в качестве индекса текущего разбираемого символа входной строки. Но сначала то я в этом месте написал просто *‘i’, в результате чего получилось, что выполнение данного кода приводило к «порче» переменной *‘i’, "объявленной" [[[ранее]]]выше и использующейся в последующем коде. [[[А в другом проекте (не могу точно вспомнить/найти где) я .]]]И я до сих пор [[[порой/]]]иногда забываю про эту "особенность" Python и наступаю на эти грабли (т.е. забываю про то, что добавление невинного цикла *‘for i’ глубоко внутри функции портит значение *‘i’, использующейся в окружающем коде).[[[ Как же это бесит.]]]

> Тогда идею вывода типов легче принять.
Вывод типов в 11l есть. Также как и в новых версиях практически всех популярных компилируемых языков программирования. Вывод типа переменной при её инициализации — это фактически уже стандарт[[[ для всех компилируемых языков программирования]]], им никого не удивишь {и многие им даже злоупотребляют — у нас на работе был программист[[[[речь про Михаила Гасанова]]]], который настолько любил писать всюду *‘auto’, появившийся в C++11 в новом качестве, что вместо *‘int i = 0;’ он писал *‘auto i = 0;’}. [[[Не вижу смысла обсуждать его полезность.]]]Но обсуждаем то мы другое, а именно «необходимость явного обозначения для объявления/создания новой переменной».

> В языках с динамической типизацией тип переменной может меняться по ходу вычислений, а при выводе типов тип переменной задаётся один раз, при инициализации.
Дело не в «динамичности» типизации. В статически типизированном Rust тип переменной тоже может меняться. Эта фича называется “rebinding”. Фактически, Rust позволяет переобъявлять переменную с [[[новым]]]другим типом, скрывая переменную с таким же именем, объявленную ранее. ‘Вот здесь’[https://users.rust-lang.org/t/rebinding-variables-with-let/12959] есть пример кода.
Но аналогичного эффекта можно добиться и в C++ [[[с ]]]использованием фигурных скобок:
#(C++)‘
{auto x = 1;
...
}{auto x = "Hello World!";
...
}
’[[[
>[https://users.rust-lang.org/t/rebinding-variables-with-let/12959 <- google:‘rust var rebind’]:‘
int x = 1;
{
char *x = "hi";
}’
]]]
Единственное, что дополнительно позволяет делать Rust (и что не получится повторить в C++) — это использовать при инициализации новой переменной значение старой/скрываемой переменной с таким же именем:
#(Rust)‘
let s = "123";
...
let s = s.len(); // `s` здесь "меняет" тип на число
// (теперь в `s` [[[количество символов в строке]]|][[[находится/]]|]содержится длина строки `s`)
’[[[Пример навеян [https://www.reddit.com/r/rust/comments/1fx4pse/is_this_an_example_of_shadowing_or_rebinding_in/ <- google:‘rust var rebind’]]]]
Заметьте, что раз ваш язык не предполагает явное обозначение объявления новой переменной, то в вашем языке такой трюк как в Rust повторить не получится.

>‘#‘
(^i = 0 цикл i < N; ++ i // i объявлена внутри скобок
   . . .)
j = i                    // но видна за скобками
’’
Так ведь тут можно, как я уже писал выше «создать переменную чуть раньше за скобкой»:
#‘
i = 0
(цикл i < N; ++ i
   . . .)
j = i
’
Или можно даже так:
#‘
i = 0; (цикл i < N; ++ i
   . . .)
j = i
’
В последнем случае количество строк кода будет такое же.
И даже количество символов такое же.
И даже специальный синтаксис с префиксным «^» не нужен.
И даже читаемость/понятность кода лучше.
---
2024-11-18 ~‘*‘veector’’ '‘<a name="2024-11-18"></a>’'

С точки зрения пользователя языков, выражу свое скромное мнение. Мне было бы удобно, что бы циклу можно было присвоить имя, если нужно, чтобы оперировать не с тем циклом, в контексте которого выполняются команды, а с тем циклом, с которым нужно и когда это нужно. Проиллюстрирую идею. Вместо меток:
#(C)‘
while (true) 
{
    switch (instr[i]) 
    {
        case '[':
            nesting_level++;
            break;
       
        case ']':
            if (--nesting_level == 0)
                goto break_;
            break;
    };
    i++;
};
break_:
’
Было бы удобно, например так:
#(C)‘
while.levels (true) 
{
    switch (instr[i]) 
    {
        case '[':
            nesting_level++;
            break;
            
        case ']':
            if (--nesting_level == 0)
                break(while.levels); // Выход из блока кода конкретного while.
            break; // Выход из блока кода текущего контекста case.
    };
    i++;
};
’
Чуть выше есть пример на языке Ада, где идея выхода из цикла на мой взгляд более корректная, чем метки. Метки и goto, явно пришедшие из ассемблера, очень не удобны для сопровождения активно изменяющегося прикладного кода. В системном же коде, без меток и goto обойтись нельзя.
---
2024-11-18 ~‘*‘Автор сайта’’

*‘alextretyak’
>‘> Вы сами придумали себе трудности, а потом героически их преодолеваете.
... можно посмотреть на это и с такой точки зрения. Как-то не думал об этом. ... синтаксис и возможности языка 11l определялись не исходя из его названия..., а наоборот — когда я понял/пришёл к окончательному решению, что корневых ключевых слов достаточно одиннадцати, то решил оставить такое название с целью предотвратить ненужное раздувание языка.’
Но этим самым Вы сжигаете за собой мосты — после этого Вы не сможете добавлять в язык новые возможности которые могут потребовать новые ключевые слова. Либо надо признать, что Ваш язык настолько совершенен, что в улучшениях не нуждается. Но тогда надо признать, что Вы большой оптимист. 🤣 Или дальше не собираетесь над ним работать. Типа «я покорил этот Эверест, а дальше мне неинтересно».

> отсутствие необходимости явного объявления/создания переменных — штука весьма удобная.
Ну вот, мне даже убеждать Вас ни в чём не надо.

> самое большое, что меня в Python раздражает, это ... — единая область видимости для всех локальных переменных в функции, независимо от того, на каком уровне они создаются. ... написал просто i, в результате чего получилось, что выполнение данного кода приводило к «порче» переменной i, "объявленной" выше
Но, может, это и хорошо? Уникальность имён внутри функций предотвратит путаницу с одноимёнными переменными. Да и при точном следовании рекомендациям по стилю программирования следует писать короткие, лаконичные функции. А в них и переменных мало. Тогда ситуации, когда «Боливар не снесёт двоих», будет легко избежать.

>‘#(Rust)‘
let s = s.len(); // `s` здесь "меняет" тип на число
’
[если] ваш язык не предполагает явное обозначение объявления новой переменной, то ... такой трюк ... повторить не получится.’
А надо ли его повторять? Мне вспоминается старая байка, как программисты спорили, какой язык лучше — Алгол или Фортран. Один из них говорит: «Зато в этом языке есть многомерные массивы!» Второй отвечает: «Покажи мне хоть одну свою программу, где бы были многомерные массивы». И крыть было не чем.

Создать одноимённую переменную с новым типом можно было бы примерно так:
#‘
имя = скрыть старую переменную и создать новую (значение)
’
где *‘имя’ слева — новая ячейка в памяти нового типа, который определяется исходя из параметра *‘значение’. То есть здесь имеет место быть вывод типа. При этом функция «скрыть старую переменную и создать новую» — полиморфна, и это полиморфизм времени компиляции. В принципе в этом можно увидеть тот же «let», только вид сбоку, но формально объявления не было.

>‘#‘
i = 0; (цикл i < N; ++ i
   . . .)
j = i
’’
Согласен, что тут от выноса инициализации i за скобки мы ничего не теряем, и это обычно будет справедливо и в других случаях. А над обратными примерами подумаю и напишу позже.

*‘veector’
> Было бы удобно
Да, «удобно» — это очень индивидуально. Это как размер одежды: кому-то удобно носить 50 размер одежды, а кому-то нет. Мне было бы удобно вот так:
#‘
(цикл истина; ++i
когда instr[i]
    = '['
        ++ nesting_level
    = ']'
        -- nesting_level
        если nesting_level = 0
            выйти)
’
Но всё это индивидуально. Владислав Джавадов вообще предлагает идею меняемого синтаксиса: главным является промежуточное представление, а отекстовка (преобразование из этого представления в обычный текст) зависит от выбранного вида синтаксиса.

> В системном же коде, без меток и goto обойтись нельзя.
Если системный код пишется на ассемблере, то конечно. Если на других языках, то среди них найдутся такие, что ‘отсутствие goto’[http://compiler.su/nekoshernyj-goto.php] и меток не принесёт неудобств.

В Си и его потомках с *‘break’ действительно неудобно получилось: и в циклах, и в переключателе один и тот же *‘break’. А к чему он относится — к циклу или переключателю — догадайся сам. Но в Си уже ничего не изменить — по причине обратной совместимости. А создаваемые языки могут избежать двусмысленности.
---
2024-11-19 ~‘*‘veector’’

Под "удобно" я имел в виду не "нравится — не нравится", не рюшечки, а удобство сопровождения активно изменяеющегося кода с целью минимизации ошибок в ходе изменения.

"в Си уже ничего не изменить" — это огромное заблуждение. Вы просто привыкли к Майкрософтовскому Си и GNU gcc Си, которые имеют множество расширений, которые ещё и не полностью совместимы между собой. А я из мира embedded и кроме этих двух есть ещё другие компиляторы со своими расширениями, не похожими ни на что другое. Естественно, классический "Hello world" или "мигание светодиодом" ими всеми компилируются без проблем. Но когда начинаются действительно серьезные вещи, системные, тогда без расширений ни одна задача не решается.

Если уж придираться к предложенному мной Си примеру, который иллюстрировал идею, то там синтаксис более-менее обратно совместим, а если нет, то можно рихтануть. Но я не заводил речь о расширении, а иллюстрировал идею.

break в Си с числовым аргументом опасен когда идет изменение кода, например, когда меняют набор операторов if() на switch() и case или наоборот, забывая увеличивать или уменьшать уровень контекста из которого нужно выходить — вот что создает неудобства.

PS. Про синтаксисы я вообще молчал, но, раз заговорили, то лично я скромно считаю синтаксис Си идеальным, мое мнение окончательно и изменению не подлежит.
---
2024-11-22 ~‘*‘alextretyak’’ '‘<a name="2024-11-22"></a>’'

> #‘break; // Выход из блока кода текущего контекста case.’
Вот уж не думал, что найдётся человек, который будет защищать [[[необходимость ]]]break в *‘case’-ах switch-а в Си. Это же [[[просто «эпичный фейл»]]]явно неудачное решение с точки зрения дизайна синтаксиса языка программирования.[[[ Причём настолько эпичный, что разработчики GCC добавили предупреждение
]]]
И его неудачность признают разработчики большинства современных ЯП, где никакого break в switch-ах (или его аналогах) [[[просто]]] нет.
[[[В том же]]]Даже в C#, несмотря на [[[основанность на]]]его максимальную близость к Си (ну, после C++ и Objective-C), неявное "проваливание" в *‘case’-ах запретили (кроме пустых *‘case’). {"Проваливание" в C# (а также в D) необходимо обозначать в коде явно с помощью *‘goto case’. В языках Go и Swift для "проваливания" используется специальное ключевое слово *‘fallthrough’.}
Собственно, только для пустых *‘case’ оно [неявное "проваливание"] и используется в реальном коде. Но им есть гораздо более удачная альтернатива.
Так, вместо
#‘
switch (ch) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
    <...>
}
’
в Pascal-е можно писать так:
#‘
case ch of
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9': <...>
end;
’
или даже так:
#‘
case ch of
    '0'..'9': <...>
end;
’

А [[[даже ]]]разработчики языков, скопировавши[[[х]]]е по глупости поведение Си, осознали эту ошибку, и рекомендуют всегда вставлять комментарий, который говорит «да, здесь не забыли поставить break, а так и задумано».
Вот цитата из ‘“Java Code Conventions”’[https://www.oracle.com/technetwork/java/codeconventions-150003.pdf <- google:‘java code guide’][[[ от]]], написанного в 1997(!) год[[[а]]]у:
> Every time a case falls through (doesn't include a break statement), add a comment where the break statement would normally be.
---
2024-11-22 ~‘*‘veector’’

> Вот уж не думал, что найдётся человек, который будет защищать break в case-ах switch-а в Си.
А я и не защищаю, а наоборот, написал в чем проблема с точки зрения сопровождения изменяющегося кода.
---
2024-11-23 ~‘*‘alextretyak’’

> А я и не защищаю
Как это так, ведь вы же сами написали: «лично я скромно считаю синтаксис Си идеальным».
И раз вы не уточняли («считаю синтаксис Си ~‘(кроме break в switch)’ идеальным»), то по умолчанию подразумевается, что вы считаете *‘весь’ синтаксис Си идеальным.
[[[Т.е.]]]Или что вы хотели тогда сказать, что «синтаксис Си — идеальный, но... в нём есть изъяны, вроде break в switch». Так получается?

Отношение к break в switch в языке программирования может быть только одно из двух — [[[вы ]]]либо "за", либо "против". Тут на двух стульях усидеть никак не получится. Так вы "за"? Или "против"?
Если "за", то см[[[отри]]]. моё предыдущее сообщение, где я [[[подробно расписал, чем такое решение плохо]]]убедительно показал, что такое решение признано плохим [[[большинством разработчиков ЯП]]]многими разработчиками ЯП.
А если вы "против", то возникает противоречие с вашим же утверждением про идеальность синтаксиса Си.

> наоборот, написал в чем проблема с точки зрения сопровождения изменяющегося кода.
Если бы в Си не было break в switch, тогда вместо *‘break(while.levels)’ достаточно было написать просто *‘break’, и проблемы [[[бы этой вообще]]]«с точки зрения сопровождения изменяющегося кода» в данном случае не было бы.
Так как (цитирую):
> когда меняют набор операторов if() на switch() и case
никакое поведение уже имеющихся break никак бы не изменилось, т.к. break-и использ[[[уются]]]овались бы только для выхода из циклов.
---
2024-11-23 ~‘*‘Клихальт’’

А может вместо потворствования юношескому максимализму к двум Вашим вариантам ответа "только за" и "только против" стоит добавить третий: "понять для чего именно это было сделано" и применять оное сообразно? 😉 Ведь конструкция switch, не требующая break, менее гибка и не позволяет совмещать код из разных вариантов выбора без раздувания кода. Кроме того, внутри циклов вместо break возможно использование continue, что позволяет оптимизировать переходы. Понятно, что всё это может за вас сделать и оптимизатор компилятора, но мне, например, по кайфу не полагаться на того парня, а делать самому то, что считаю сделать нужным.
---
2024-11-25 ~‘*‘veector’’

*‘alextretyak’
Синтаксис всего языка Си — лично я считаю идеальным. И в то же время, лично я считаю, что логику с break и continue можно было сделать лучше, причем в рамках текущего синтаксиса язык Си.

Данный сайт посвящен разрабатываемому языку и тут ребята хотят повторить тот же логический изъян (не синтаксический изъян), что и в Си с break и continue. Поэтому, решил высказать, чем же ещё плох логический подход с числовой константой для break, кроме того, что рассмотрено в исходной статье.

> Если бы в Си не было break в switch, тогда вместо break(while.levels) достаточно было написать просто break ...
Всё-таки недостаточно, потому что, например, если есть два и более вложенных циклов, иногда надо выйти из всех циклов, разом. И мне, как пользователю языка и программисту, было бы удобнее указывать из какого именно цикла мне надо выйти, не высчитывая уровень вложенности, который может меняться в ходе сопровождения программы при сокращении или увеличении уровней вложенности. Да, это редкие события, поэтому, очень редко доставляют проблем, но, всё-таки доставляют. Причем так, что достаточно одного раза, чтобы запомнить на всю жизнь.

*‘Клихальт’
Вот, я тоже разделяю вот эту вашу точку зрения "конструкция switch, не требующая break, менее гибка". Хотя, там, где можно обойтись без такой возможности языка, предпочитаю не делать case без break, но, иногда, да, приходится. Так-то язык Си в switch позволяет делать даже такое, от чего даже мне становится как-то не по себе: [https://en.wikipedia.org/wiki/Duff's_device]. Кстати, Клихальт, какой язык программирования вам нравится?
---
2024-11-27 ~‘*‘alextretyak’’

*‘Клихальт’
> А может вместо потворствования юношескому максимализму ...
Бывают случаи, когда максимализм уместен. И данный случай — один из таких.
К тому же, позиция «синтаксис языка Х — идеален» — это ещё больший максимализм. Тем более, когда Х это Си.

> Ведь конструкция switch, не требующая break, менее гибка и не позволяет совмещать код из разных вариантов выбора без раздувания кода.
Нет. Выразительные возможности в обоих случаях абсолютно одинаковы. Вопрос только в принятых умолчаниях. В случае Си отсутствие break обозначает "проваливание", но практика программирования показала, что это неудачное решение, т.к. "проваливание" требуется гораздо реже, чем break. Поэтому в современных ЯП break в switch убрали, т.к. поведение "break" осуществляется по умолчанию. Но поведение "проваливания" по-прежнему доступно, только его необходимо обозначать в коде явно — чаще всего для этого используется ключевое слово *‘fallthrough’ ([[[о чём я уже говорил]]]которое я уже упоминал чуть раньше).
Так вот, мне очевидно, что умолчание, принятое в Си — явно неудачно, и [[[мне]]] было бы любопытно увидеть хоть какой-то разумный аргумент в защиту этого умолчания.
А так как вариантов тут всего [[[2]/]]два — по умолчанию либо "break" (при этом ключевое слово break в switch становится ненужным), либо "проваливание" (при этом ненужным становится ключевое слово fallthrough) — оттого и получается такой [[[вот ]]]максимализм в отношении к break в switch в языке программирования.

*‘veector’
> Синтаксис всего языка Си — лично я считаю идеальным.
Ладно. С вами всё понятно. Для вас «идеальность синтаксиса языка» определяется персональными ощущениями при программировании на [[[нём/]]]этом языке, а не стремящ[[[е/]]]имся к объективности рациональным обоснованием.[[[ И добиться от вас [[[аргументированного ответа]]]конкретных аргументов[[[ в защиту даже явно неудачных элементов синтаксиса Си]]], похоже, не получится.]]]
---
2024-11-27 ~‘*‘Gudleifr’’

> стремящимся к объективности рациональным обоснованием
И в чем оно заключается?
---
2024-11-29 ~‘*‘alextretyak’’

> И в чем оно заключается?
В стремлении к объективности. :)(:
К примеру, моё утверждение «"проваливание" требуется гораздо реже, чем break» вообще говоря субъективно, и основано только на моём личном опыте программирования.
Чтобы сделать более объективное утверждение, [[[Например, берём]]]можно взять какой-нибудь достаточно популярный проект с открытым исходным кодом[[[ на Си и анализируем]]] и проанализировать его исходники для сбора статистики, показывающей насколько именно редко [[[используется/]]]требуется "проваливание" в switch.

[[[Возьмём, к примеру, исходный код ядра Linux. ]]]В качестве такого проекта можно взять ядро Linux. Я проанализировал ‘исходный код версии 1.0’[https://www.kernel.org/pub/linux/kernel/v1.0/linux-1.0.tar.gz <- https://www.kernel.org/pub/linux/kernel/ <- google:‘old linux kernel source’], которая вышла аж в 1994 году, но язык Си с тех пор не сильно изменился, да и программисты писать[[[ лучше]]] код на Си лучше не стали. И объёма кода этой версии — 100 тыс. строк — вполне достаточно для [[[грубой]]]ориентировочной оценки. (Для справки: последняя версия ядра 6.12 содержит в 300(!) раз больше кода — 1.5Гб (против 5Мб в версии 1.0) и свыше 30 млн. строк.)

Для анализа я использовал модуль pycparser на Python. Т.к. работает он довольно медленно, а код ядра Linux состоит из большого количества .c файлов и каждый .c файл включает довольно много заголовочных файлов, то я решил объединить их в один .c файл для ускорения разбора всего исходного кода. При этом, правда, пришлось исходники немного "обработать напильником", т.к. в .c файлах встречались объявления макросов с короткими именами (например, #(C)‘#define pos (vc_cons[currcons].vc_pos)’), которые необходимо undefine'ить (с помощью #(C)‘#undef pos’) в конце файла, а то иначе они ломают последующий код.

В результате получились такие цифры.
Всего конструкций switch в коде ядра: *‘215’ (чуть меньше, чем общее количество .c файлов, т.е. на один .c файл приходится примерно один switch).
Конструкций switch, в которых есть не пустой и не последний case, который не оканчивается на break, на continue, на return или на goto: *‘26’. Из них ложных срабатываний: *‘10’. О причинах ложных срабатываний можно почитать в ‘моём отчёте’[https://github.com/alextretyak/break_in_switch/blob/master/report.txt], для составления которого я проанализировал ~‘каждый’ случай обнаруженного анализатором потенциального "проваливания" в switch — при запуске скрипт-анализатор выдаёт их в формате имя_исходного_файла:номер_строки:позиция_в_строке, всего таких случаев получилось 32 (хотя прокомментировать каждый случай я поленился[[[,]]] — комментарии есть только у ложных срабатываний). Там же в репозитории мой скрипт-анализатор в файле break_in_switch.py и Release с ‘архивом с "обработанным" кодом ядра’[https://github.com/alextretyak/break_in_switch/releases/download/1/break_in_switch.zip].
Таким образом, итого получается, что в коде ядра Linux 1.0 "проваливание" используется [с учётом ложных срабатываний] только в *‘[[[16]954cf2957203c0f8f5993568a99765319c46969b]]17’ switch'ах из 215, т.е. в *‘[[[7]]]8%’ switch'ей.
---
2024-11-29 ~‘*‘Gudleifr’’

> В качестве такого проекта можно взять ядро Linux. Я проанализировал исходный код версии 1.0, которая вышла аж в 1994 году, но язык Си с тех пор не сильно изменился, да и программисты писать код на Си лучше не стали
Наоборот, к 94-му Си уже безвозвратно устарел.

Да и сама идея того, что один большой проект статистически заменит много мелких, не безупречна. Большая субъективность не означает объективности.
---
2024-11-29 ~‘*‘Автор сайта’’

*‘Alextretyak’, браво! Завидую Вашей дотошности и целеустремлённости! Надо же, не поленились собрать статистику, проверили алгеброй гармонию. А я бы, наверное, решил для себя, что «тут и так всё ясно, ну что тут думать?».

Думаю, для проваливания вниз было бы уместно использовать ключевое слово *‘then’ вместо *‘fallthrough’. Вот тут оно было бы к месту. В отличие от *‘then’ в Паскале после *‘if условие’. Там оно так себе, «не пришей к звезде манжет».
---
2024-11-29 ~‘*‘Клихальт’’

*‘Alextretyak’, попробуйте проанализировать тексты из эпохи, когда ещё не принято было писать так, как написано ядро Linux, которое Вы проанализировали. Вот тексты первого компилятора Си, написанного на Си.
[https://github.com/mortdeus/legacy-cc]
Точную статистику я по ним не собирал, как то сделали Вы, но после того как пробежался по ним глазами, увидел, что там картина несколько отлична от той, что описали Вы.
---
2024-11-29 ~‘*‘veector’’

*‘alextretyak’, хорошо, вы сделали некоторую статистику:
> Таким образом, итого получается, что в коде ядра Linux 1.0 "проваливание" используется только в [[[16]]]17 switch-ах из 215, т.е. в [[[7]]]8% switch-ей.
И что она для вас показывает и на какие выводы вас подталкивает? Что вы хотите этой статистикой показать?
---
2024-11-30 ~‘*‘alextretyak’’

*‘Клихальт’
>‘https://github.com/mortdeus/legacy-cc
... там картина несколько отлична от той, что описали Вы.’
Да, в этом коде статистика получается другая.
Всего конструкций switch: [[[58]2 switch'а потерялось (оказались закомментированны [[[{]]]`/* } switch(cval) { /* goto */`[[[}]]] и убраны препроцессором), ef81ce5fe6904cd9625c8217ae68de33fcdb9ad0]]60 ([[[по 4.5 switch'а на один .c файл, при том что каждый .c файл состоит из 400 строк кода]]]в пересчёте на общее количество строк кода относительное количество switch'ей в этом коде в 5 раз выше, чем в коде ядра Linux 1.0).
"Проваливание" используется в 11 switch'ах, т.е. в [[[19]]]18% switch'ей.
Ложных срабатываний [от доработанного скрипта-анализатора], в принципе, не было. Только пара спорных моментов. Например, в ‘этом месте’[https://github.com/mortdeus/legacy-cc/blob/master/prestruct/c01.c#L86-L88] на мой взгляд было бы понятнее вместо *‘d1++; d2++;’ с "проваливанием" написать *‘d1+=2; d2+=2; break;’.

*‘veector’
> Что вы хотите этой статистикой показать?
. Во-первых, [[[краткости кода]]]то, что при использовании «break по умолчанию» вместо «"проваливание" по умолчанию» в [[[более чем 90%]]]подавляющем большинстве switch'ей (и, как следствие, в программе в целом) уменьшится количество кода[[[ (особенно актуально когда кода в case'ах немного)]]] (конечно, минимизация объёма кода — это не самоцель, но в данном случае речь идёт об избавлении от синтаксического мусора в виде вездесущих break в почти каждом case).
. Во-вторых, синтаксис языка программирования должен по возможности препятствовать возникновению ошибок в коде. Если в каком-то case нету break в конце (либо return или continue) — то это скорее всего ошибка, т.к. "проваливание" требуется [[[очень и очень]]][[[крайне/]]][[[достаточно/]]]очень редко (согласно статистике). И язык Си своим «"проваливанием" по умолчанию» потворствует [[[возникновению/]]]допущению таких ошибок в коде.
И есть ещё одно преимущество отсутствия break в switch никак не связанное со статистикой: конструкция switch может быть не statement'ом, а выражением и возвращать результат соответствующей ветки case. Почитайте про switch-выражения в Java: [https://habr.com/ru/articles/443464/ <- google:‘java switch break’]
В switch-выражениях break совсем не уместен. При этом switch-выражения вполне могут заменить традиционный switch-statement, и в новых языках программирования поддерживать switch-statement смысла нет — достаточно только switch-выражений. В том же Kotlin'е switch-statement'ов нет, а есть только switch-выражения (правда ключевое слово используется другое — *‘when’).
---
2024-11-30 ~‘*‘Автор сайта’’

> Вот тексты первого компилятора Си
А в чём смысл рассмотрения именно древних исходников?

Взял файл первый попавшийся файл last1120c/c00.c и посчитал, как построены *‘switch’. В 6 конструкциях *‘switch’ встретил такие *‘case’:
. *‘проваливание’ после *‘case’ — 7 раз,
. заканчивается *‘goto’ — 23 раза,
. заканчивается *‘exit’ — 2 раза,
. заканчивается *‘return’ — 26 раз,
. удивительно, но ни одного *‘break’!
Не ахти какая статистика, но проваливание используется нечасто. О чём догадывался и раньше.

> Что вы хотите этой статистикой показать?
Лично я увидел в статистике, что проваливание требуется редко. Поэтому логично сделать поведением по умолчанию выход из *‘switch’, а не проваливание. А если проваливание потребовалось, то на этот случай предусмотреть специальный оператор или ключевое слово.
---
2024-11-30 ~‘*‘Клихальт’’

*‘Автор сайта’,
> А в чём смысл рассмотрения именно древних исходников?
Если быть честным до конца, то исходники ядра Linux 1.0 с точки зрения сегодняшнего дня это такие же древние исходники, хотя против их рассмотрения вы не имели ничего против. И они ровно также субъективны, как и любые другие исходные тексты на этом языке программирования, вне зависимости от времени их написания. Смысл же их приведения мною состоит в том, что это шаг в сторону из круга понятий и приёмов программирования, принятых одними и вбитых в головы другим. Это попытка показать, что может быть и иначе.

> Не ахти какая статистика, но проваливание используется нечасто. О чём догадывался и раньше.
Давайте поставим вопрос несколько иначе: насколько часто для выхода из ветки оператора выбора используется именно break? И в данном случае ответ однозначный — в рассматриваем вами участке текста ни разу, а в целом крайне редко. Не спорю, в настоящее время ситуация совершенно иная и происходит это, по моему мнению, оттого что во времена, к коим относятся тексты, приведённого мною примера, основным языком разработки был язык ассемблера, где вся оптимизация кода лежала на плечах программиста, а не языки высокого уровня и оптимизирующие компиляторы, как сейчас, где чем дальше, тем больше программист всё больше отстраняется сначала от оптимизации, а затем уже и от самого кода, что с моей точки зрения в корне неверно.

*‘alextretyak’,
> Во-первых, то, что при использовании «break по умолчанию» вместо «"проваливание" по умолчанию» в подавляющем большинстве switch'ей (и, как следствие, в программе в целом) уменьшится количество кода (конечно, минимизация объёма кода — это не самоцель, но в данном случае речь идёт об избавлении от синтаксического мусора в виде вездесущих break в почти каждом case).
Под уменьшением количества кода Вы верно имели ввиду уменьшение количества исходного текста программы, а не количества кода программы? Что ж до "избавлении от синтаксического мусора в виде вездесущих break в почти каждом case" позволю отослать Вас к приведённому мною примеру исходных текстов компилятора языка Си, где break вообще практически не используется для выхода из ветки оператора выбора. Что ж до "синтаксического мусора", то break, впрочем как continue и return, при помощи которых происходит выход из ветки выбора это не "синтаксический мусор", а конкретные операторы, осуществляющие конкретные действия, которые необходимы с точки зрения программиста в конкретном месте программы, а "синтаксическим мусором" как раз и является псевдооператор "проваливания", который нужен лишь для того, чтобы дать понять думающему за тебя компилятору, что твое действие осмысленно и ничего за тебя в этом месте додумывать не надо.
---
2024-12-01 ~‘*‘alextretyak’’

Предлагаю продолжить обсуждение тут[./../pereklyuchatel/#2024-12-01].
---
2024-12-09 ~‘*‘veector’’

*‘@alextretyak’
>‘Во-первых, то, что при использовании «break по умолчанию» вместо ...
Во-вторых, синтаксис языка программирования должен ...
И есть ещё одно преимущество отсутствия break в switch ...’

Не надеюсь на понимание, но я все-таки напишу.

Профессиональные программисты не так смотрят на эти вещи, как вы, *‘alextretyak’.
Первичным для языка Си, является — _‘информационная модель адресного пространства, совпадающая с моделью как у процессора’.
А это значит, что программист работает в своей программе, в том числе, и с адресами, и с переходами по адресам в адресном пространстве.
Ключевые слова "case" и "default" являются метками в адресном пространстве для формирования условных переходов.
Ключевое слово "break" является контекстным оператором безусловного перехода, т.е. как "goto", только в контексте "switch".
Тоже самое относится к "break" для выхода из циклов, это просто контекстный оператор безусловного перехода.

Никто и никогда, из нормальных программистов, не забывает их писать или не писать, это все выдумки "программистов", пришедших из математики (теоретиков).
Быстрый набор, забота о минимуме строк кода и забывчивость — это части удел кодеров, у которых в приоритете набор текста, без необходимости понимания сути, происходящего в программе, т.к. работают по указке программиста или другого руководителя.
---
2024-12-09 ~‘*‘Неслучайный читатель’’

У программистов и математиков есть общий предок — детсадовец необразованный. Математиком школьник становится раньше, чем программистом. Так построено образование. В чистом виде программистов не существует, у всех есть математический бэкграунд.

Если поведением по умолчанию является не проваливание, а выход из *‘switch’, то это лишь рационализация, полезность которой выведена эмпирическим путём. Это не волшебная пилюля, полная чудес, а небольшое улучшение. Если не довлеет обратная совместимость, то почему бы и нет?
---
2024-12-09 ~‘*‘Клихальт’’

*‘Неслучайный читатель’,
> В чистом виде программистов не существует, у всех есть математический бэкграунд.
Позвольте с вами не согласиться. Несмотря на общий образовательный "математический бэкграунд" в программирование люди приходят как сверху — со стороны математики и вычислительных задач, рассматривая само программирование как полезный, но не самый важный придаток к основному занятию, так и снизу — со стороны железа. И тут речь не о системщиках и прикладниках. Встречал на своём веку массу системщиков, принадлежащих по складу ума и кругу интересов как раз к первой когорте, а вовсе не ко второй и наоборот.

> Если поведением по умолчанию является не проваливание, а выход из switch, то это лишь рационализация, полезность которой выведена эмпирическим путём. Это не волшебная пилюля, полная чудес, а небольшое улучшение.
Это не "рационализация" и не "небольшое улучшение", а реверанс теоретикам и очередной шаг прочь от машины в сторону математики. Си времён K&R это по сути своей высокоуровневый ассемблер, или язык среднего уровня (как его в шутку называли) с весьма ограниченной областью применения, а не высокоуровневый язык, аналог языков линии Алгола, просто с несколько видоизменённым синтаксисом, который можно использовать повсюду в режиме "каждой бочке затычка".
---
2024-12-10 ~‘*‘Неслучайный читатель’’

Что в лоб, что по лбу — от изменения поведения по умолчанию генерируемый машинный код при решении одной и той же задачи не изменится ни на бит.
---
2024-12-10 ~‘*‘Клихальт’’

*‘Неслучайный читатель’,
> Что в лоб, что по лбу — от изменения поведения по умолчанию генерируемый машинный код при решении одной и той же задачи не изменится ни на бит.
Генерируемый компилятором код в данном конкретном случае не изменится и это правда, на вас, как состоявшегося программиста это так же, если и окажет влияние, то минимальное, а вот для новых поколений, не имевших "тяжелого ассемблерного детства" и кодирования в условиях крайне ограниченных ресурсов, вопрос уже далеко не такой [[[однозначный]]] однозначный, а скорее наоборот.
---
2024-12-10 ~‘*‘veector’’

*‘@Неслучайный читатель’
> Что в лоб, что по лбу — от изменения поведения по умолчанию генерируемый машинный код при решении одной и той же задачи не изменится ни на бит.
В этом случае для программиста, вдруг, в Си появятся неявные "goto".
Это все-таки очень серьезное и неожиданное логическое изменение, сравнимое с изменением исходных условий.
Что, в свою очередь, может повлиять на само генерируемое программистом решение. Предположу, что в операциях сравнения будут использованы обратные условия, которые и повлияют на результирующий машинный код.

*‘@Клихальт’
Вам, от меня лично, огромный плюс в карму!
Хочу добавить к вашим словам, что дело ещё и в достижения необходимой скорости работы и отзывчивости (скорости реакции на события).
Си ещё уникален тем, что он практически не добавляет никакой отсебятины и у него почти ничего не скрыто "под капотом".
---
2024-12-14 ~‘*‘alextretyak’’

*‘veector’
> Профессиональные программисты не так смотрят на эти вещи
Здорово, что вы и все другие профессиональные программисты никогда не забывают писать break. Но в реальном мире, увы, профессиональных программистов на всех не хватает. И код на Си пишут не только лишь профессиональные программисты. И члены комитета по стандартизации Си это понимают, и (о ужас!) в стандарте C23 в конструкцию switch добавили псевдооператор "проваливания" в виде атрибута *‘0‘[[fallthrough]]’’:
[https://en.cppreference.com/w/c/language/attributes/fallthrough <- google:‘fallthrough attribute c’ <- https://pvs-studio.ru/ru/docs/warnings/v796/ <- google:‘pvs studio break switch’]
Как вам такая новость?

Да, стандарт C23 [[[предписывает лишь]]]подразумевает лишь выдачу предупреждения при отсутствии [[[атрибута]]] *‘0‘[[fallthrough]]’’ в case без *‘break’ в конце, а точнее — подавление предупреждения посредством этого атрибута. Но во многих серьёзных проектах включена опция компиляции -‍Werror [которая предписывает трактовать все предупреждения как ошибки] или аналогичная, так что фактически отсутствие *‘0‘[[fallthrough]]’’ или *‘break’ (или return/continue) в конце case означает ошибку компиляции при использовании последнего стандарта языка Си.
Так что, когда вы пишите «синтаксис всего языка Си — лично я считаю идеальным», вы хотя бы уточняйте какую именно версию языка Си вы имеете в виду. :)(:

Также рекомендую ознакомиться с позицией Андрея Карпова, одного из основателей и ‘технического директора’[https://pvs-studio.ru/ru/blog/posts/0231/ <- google:‘андрей карпов директор pvs’ <- [google:‘андрей карпов pvs’]:‘Андрей Карпов — один из основателей проекта PVS-Studio, технический директор компании «Системы программной верификации».’] PVS-Studio:
>[https://pvs-studio.ru/ru/blog/posts/cpp/0554/ <= https://www.viva64.com/ru/b/0554/ <- https://habr.com/ru/companies/pvs-studio/articles/418891/ <- google:‘pvs studio V796 site:habr.com’]:‘
Многие годы я изучал ошибки в программах и сейчас могу с уверенностью заявить, что в C, а вслед за ним и в C++, оператор ~‘switch’ сделан неправильно. ... огромное количество ошибок убедило меня, что был выбран неправильный подход. Понятно, что теперь уже поздно. Просто хотелось сказать, что правильным решением было бы обязательно писать слово ~‘break’ или обратное ключевое слово, например, ~‘fallthrough’. Сколько бы сил, времени и денег было сэкономлено.’
Его вы[[[, очевидно,]]] тоже не относите к профессиональным программистам?
---
2024-12-15 ~‘*‘Автор сайта’’

> Никто и никогда, из нормальных программистов, не забывает их писать или не писать, это все выдумки "программистов", пришедших из математики (теоретиков).
После знакомства с коллекциями ошибок программистов от PVS-Studio можно сказать, что волосы дыбом встают. Когда небожители в таких серьёзных проектах допускают такие нелепые ошибки, то впору призадуматься: на чём мир держится? Куда уж там «нормальным» программистам!

>‘в стандарте C23 в конструкцию switch добавили псевдооператор "проваливания" в виде атрибута *‘fallthrough’...
рекомендую ознакомиться с позицией Андрея Карпова’
*‘alextretyak’, очень весомые аргументы.
---
2024-12-15 ~‘*‘Клихальт’’

> После знакомства с коллекциями ошибок программистов от PVS-Studio можно сказать, что волосы дыбом встают. Когда небожители в таких серьёзных проектах допускают такие нелепые ошибки, то впору призадуматься: на чём мир держится? Куда уж там «нормальным» программистам!
Коллекция ошибок содержит лишь сами ошибки, но не содержит разбора ситуации, приведшей к их появлению и оценки конкретного программиста их допустившего в этой ситуации, а в современном мире с потогонной системой организации труда, катастрофическим падением уровня программистов и их заинтересованности в конечных результатах своего труда это куда важнее обезличенного описания самих ошибок.

> очень весомые аргументы.
Это аргументы в пользу того, что комитет пытается хоть как-то выйти из сложившейся на момент принятия стандарта ситуации и с моей точки зрения он идёт вверх по лестнице, ведущей вниз.
---
2024-12-15 ~‘*‘Неслучайный читатель’’

Карпов и сотоварищи подкидывают своему PVS-Studio проекты с открытым кодом. Кто ж им даст закрытые коды, правильно? Тогда при чём здесь потогонная система? Кто из добровольцев гонит пот, как не они сами? Гитхаб завален проектами программистов, которых никто не просил писать этот код, они его пишут сами без принуждения.
---
2024-12-16 ~‘*‘veector’’

*‘@alextretyak’
> Здорово, что вы и все другие профессиональные программисты никогда не забывают писать break.
Забываем, конечно, но очень редко.
У нас чаще используется такой код:
#‘
    switch (State(Obect))
    {
        case StateFoo:
            return StateBar(Obect, ...);
        ...[[[}]]|]
’
Да и самопальный статический анализатор давно помогает.
А ещё у нас всегда есть default.

>‘...fallthrough Как вам такая новость?
...
Но в реальном мире, увы, профессиональных программистов на всех не хватает.’
Не хватает даже просто нормальных программистов, это точно. Может, тогда, им писать не на Си или все-таки готовить нормальных и учителей научить обучать? Язык-то тут при чем? Или будем в Русский язык вносить слова типа "трафка зелинеет" вместо или вместе с "травка зеленеет"? *‘@alextretyak’, вопросы по большей части риторические, ответа на них не требуется, т.к. ответы моего мнения не изменят, ибо до абсурда можно довести все что угодно.
Опять же, повторюсь, я работаю в embedded, и не выбираю какой стандартности компилятор использовать. Мне всегда приходится иметь дело с тем, что идет в комплекте к железу.

> Его вы тоже не относите к профессиональным программистам?
Все зависит от того, как он сам пишет и пользуется ли стат. анализатором.
Стат. анализаторы полезны, с этим никто не спорит, остальное, чистой воды пиар своего анализатора.
Вот если бы он взял и сравнил стат. анализаторы (хотя бы с https://frama-c.com/ (просто первая попавшаяся ссылка с живым свободным проектом анализатора)), было бы больше пользы, но увы и ах.
Вообще, практика показала, чтобы стат. анализатор давал пользу, а не пудрил мозги, его нужно настраивать под проект и стиль кода. Поэтому, мы ограничиваемся лишь собственным набором опыта и не гонимся за всевозможными ситуациями.
---
2024-12-16 ~‘*‘Клихальт’’

*‘veector’,
> Не хватает даже просто нормальных программистов, это точно. Может, тогда, им писать не на Си или все-таки готовить нормальных и учителей научить обучать? Язык-то тут при чем?
Согласен на все сто! С некоторых пор стало модно недостатки в подготовке программистов списывать на недостатки языка программирования, используемого ими.
---
2024-12-17 ~‘*‘Бурановский дедушка’’

> скромно считаю синтаксис Си идеальным
> стало модно недостатки в подготовке программистов списывать на недостатки языка программирования
В разделе «Проблемы и критика» страницы «Си_(язык_программирования)» в Википедии много и подробно описаны недостатки Си. Это объективно существующие недостатки, они существуют вне зависимости от моды. Однако если бы вдруг эти недостатки исчезли, то хуже бы от этого не стало. Если кто-то сделает лучше, чем сделано в Си, то флаг в руки. Rust в последнее время всё чаще фигурирует в слухах, что на нём переписывают ОС: то Windows, то Linux... Но и Rust не идеален. «У каждого свои недостатки» (© «В джазе только девушки»).
---
2024-12-17 ~‘*‘Клихальт’’

*‘Бурановский дедушка’,
> В разделе «Проблемы и критика» страницы «Си_(язык_программирования)» в Википедии много и подробно описаны недостатки Си.
Львиная доля описанных там недостатков произрастает из вкусовщины эпохи повального недостатка действительно квалифицированных программистов и неверного позиционирования языка Си в качестве языка высокого уровня общего назначения, когда на нём стали писать все, кто попало и что попало. Язык Си разрабатывался как замена языку ассемблера в системном программировании. И анализировать его надо именно с этой стороны. Попробуйте рассмотреть с тех же позиций язык ассемблера и предложить разработать ему на замену безопасную версию. Думается плач Ярославны по поводу небезопасности языка Си при этом достигнет масштаба урагана высшей категории.

> «У каждого свои недостатки» (© «В джазе только девушки»).
А вот с этим согласен, но только при должной квалификации и сноровке практически любой недостаток ЯП, при применении языка непосредственно по назначению, можно превратить в его достоинство.
---
2024-12-18 ~‘*‘Бурановский дедушка’’

Верно и обратное: стараются преуменьшить влияние ошибок в дизайне языков на качество программ. Приводят довод, что хорошему танцору ничто не может помешать.
---
2024-12-19 ~‘*‘veector’’

> Верно и обратное: стараются преуменьшить влияние ошибок в дизайне языков на качество программ.
Совершенно верно. И на примере именно косяка Си, я как раз пытался предостеречь разработчиков компилятора с этого сайта не повторять такого вот в '‘<a href="#2024-11-18" target="_self">этом сообщении</a>’'. А вот наличие или отсутствие break в case, увы, лично я не могу признать ошибкой, потому что это контекстный переход (контекстный goto) и к нему претензий у меня нет.
